{"component":"module.exports =\nwebpackJsonp([5],{\n\n/***/ 555:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(__resourceQuery) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _style = __webpack_require__(559);\n\nvar _style2 = _interopRequireDefault(_style);\n\nvar _react = __webpack_require__(11);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _head = __webpack_require__(198);\n\nvar _head2 = _interopRequireDefault(_head);\n\nvar _link = __webpack_require__(558);\n\nvar _link2 = _interopRequireDefault(_link);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _jsxFileName = '/Users/chrisnager/Dropbox/Chris/Projects/chrisnager.com/pages/index.js?entry';\n\n\nvar year = new Date().getFullYear();\n\nvar data = {\n  intro: {\n    logo: 'CN',\n    name: 'Chris Nager',\n    description: 'Minimalist developer-designer in Brooklyn, NY',\n    skills: ['javascript', 'es' + (year + 1), 'node', 'css', 'css-in-js', 'single-purpose css classes', 'css-animations', 'postcss', 'html', 'react', 'react native', 'redux', 'react-router', 'jsx', 'jest', 'git', 'next.js', 'now', 'webpack', 'gulp', 'vim', 'mobile apps', 'ux', 'ui', 'branding', 'icons', 'design systems', 'typography', 'accessibility']\n  },\n  profile: {\n    name: 'Profile',\n    entries: []\n  },\n  career: {\n    name: 'Career',\n    entries: [{\n      name: 'IEX',\n      description: '2015 - present',\n      url: 'https://iextrading.com/',\n      tags: ['job']\n    }, {\n      name: 'Salesforce',\n      description: '2011 - 2015',\n      url: 'https://www.salesforce.com/',\n      tags: ['job']\n    }, {\n      name: 'Luckie',\n      description: '2010 -2011',\n      url: 'http://www.luckie.com/',\n      tags: ['job']\n    }]\n  },\n  projects: {\n    name: 'Works',\n    entries: [{\n      name: '> Signum majoritatis',\n      description: 'A side-scrolling game built in a single string',\n      url: 'http://bit.ly/smajor',\n      tags: ['javascript', 'game']\n    }, {\n      name: 'hexcodes',\n      description: 'All 4,096 shorthand hexcodes',\n      url: 'https://chrisnager.github.io/hexcodes/',\n      tags: ['color']\n    }, {\n      name: 'short-color-names',\n      description: 'The 45 CSS color names that are as short as or shorter than their corresponding hexcodes',\n      url: 'https://chrisnager.github.io/short-color-names/',\n      tags: ['color']\n    }, {\n      name: 'simple-palette',\n      description: 'A simple color palette',\n      url: 'http://chrisnager.github.io/simple-palette/',\n      tags: ['color']\n    }, {\n      name: 'ungrid',\n      description: 'The simplest responsive css grid',\n      url: 'http://chrisnager.github.io/ungrid/',\n      tags: ['layout', 'grid']\n    }, {\n      name: 'simple-debug.css',\n      description: 'Debug your layouts with one line of CSS',\n      url: 'https://chrisnager.github.io/simple-debug.css/',\n      tags: ['layout']\n    }, {\n      name: 'Emoonji',\n      description: 'A chatbot',\n      url: 'https://bit.do/emoonji',\n      tags: ['chatbot', 'javascript', 'firebase']\n    }, {\n      name: 'Give \\'n\\' Go',\n      description: 'A curated gallery of Dribbble shots reworked as interactive CodePen pens',\n      url: 'http://give-n-go.co/',\n      tags: ['css', 'design', 'community', 'app', 'site']\n    }, {\n      name: 'Cheer me up',\n      description: 'Fun, custom pages in seconds',\n      url: 'http://cheermeup.io/',\n      tags: ['css', 'javascript', 'gif']\n    }, {\n      name: 'ungrid',\n      description: 'the simplest responsive css grid',\n      url: 'http://chrisnager.github.io/ungrid/',\n      tags: ['css', 'grid']\n    }, {\n      name: 'Until',\n      description: 'Are we there yet?',\n      url: 'http://chrisnager.github.io/until/',\n      tags: ['css', 'react', 'javascript']\n    }, {\n      name: 'UN Disaster Response',\n      description: 'Currently working with the Harvard Humanitarian Initiative on a disaster and humanitarian response survey building app to be used by the United Nations',\n      url: 'https://vimeo.com/71911497',\n      tags: ['css']\n    }, {\n      name: 'Jaunt',\n      description: 'Let your friends be your city guides. (TechCrunch Disrupt Hackathon app entry)',\n      url: 'https://disruptnyhackathon.devpost.com/submissions/23514-jaunt',\n      tags: ['css', 'hackathon']\n    }, {\n      name: 'Cursors',\n      description: 'All available cursors',\n      url: 'http://chrisnager.github.io/cursors/',\n      tags: ['html', 'css']\n    }, {\n      name: 'simple-debug.css',\n      description: 'Debug your layouts with one line of CSS',\n      url: 'http://chrisnager.github.io/simple-debug.css/',\n      tags: ['css', 'layout', 'debugger']\n    }, {\n      name: 'simple palette',\n      description: 'A simple color palette',\n      url: 'http://chrisnager.github.io/simple-palette/',\n      tags: ['color']\n    }, {\n      name: 'âœ‚ short color names',\n      description: 'The 44 CSS color names that are as short as or shorter than their corresponding hexcodes.',\n      url: 'http://chrisnager.github.io/short-color-names/',\n      tags: ['color', 'css']\n    }, {\n      name: 'hexcodes',\n      description: 'All possible three digit hexcodes',\n      url: 'http://chrisnager.github.io/hexcodes/',\n      tags: ['color']\n    }, {\n      name: 'tiny google fonts',\n      description: 'Strip down your google fonts significantly to only include the characters you\\'re actually using',\n      url: 'http://chrisnager.github.io/tiny-google-fonts/',\n      tags: ['fonts', 'javascript']\n    }, {\n      name: 'Birthday hex',\n      description: 'Find your birthday hexcode',\n      url: 'http://chrisnager.github.io/birthday-hex/',\n      tags: ['color', 'css', 'javascript']\n    }, {\n      name: 'SVG Please',\n      description: 'Simple script to replace your bitmap icons with inline SVGs with bitmap fallback built in',\n      url: 'http://chrisnager.github.io/svg-please/',\n      tags: ['svg', 'javascript']\n    }, {\n      name: '#Fav5',\n      description: 'What are your five most important items?',\n      url: 'http://fav5.co/',\n      tags: ['css']\n    }, {\n      name: 'Twadlib!',\n      description: 'Ad-lib your tweets',\n      url: 'http://chrisnager.com/twadlib/',\n      tags: ['javascript', 'css', 'competition', 'twitter', '10k']\n    }, {\n      name: 'Bliss',\n      description: 'Beautifully lean, ideal style sheets',\n      url: 'http://chrisnager.github.io/bliss/',\n      tags: ['css']\n    }, {\n      name: 'Crafted CSS',\n      description: 'A personal compilation of CSS practices I follow',\n      url: 'https://github.com/chrisnager/crafted-css',\n      tags: ['css', 'code guidelines']\n    }, {\n      name: 'Social Logos',\n      description: 'Download official social logos',\n      url: 'http://chrisnager.com/social-logos/',\n      tags: ['css']\n    }, {\n      name: 'chrisnager.com v1',\n      description: 'Origins',\n      url: 'https://web.archive.org/web/20110808135606/http://chrisnager.com/portfolio/#chrisnager-v1',\n      tags: ['site', 'html', 'css', 'javascript']\n    }, {\n      name: 'chrisnager.com v2',\n      description: 'Care to reminisce?',\n      url: 'https://web.archive.org/web/20110809085951/http://chrisnager.com/',\n      tags: ['site', 'html', 'css', 'javascript']\n    }, {\n      name: 'chrisnager.com v3',\n      description: 'Iterate',\n      url: 'https://web.archive.org/web/20161001182013/http://chrisnager.com/',\n      tags: ['site', 'html', 'css', 'javascript']\n    }, {\n      name: 'Ben Thomson Photo',\n      description: 'Awwwards Site of the Day',\n      url: 'https://www.awwwards.com/sites/ben-thomson-photography',\n      tags: ['site', 'html', 'css', 'branding', 'logo', 'ux', 'research', 'ui']\n    }, {\n      name: 'Totally Fresh',\n      description: 'Experimental CSS3 design featured on Smashing Magazine',\n      url: 'https://www.smashingmagazine.com/2010/07/css3-design-contest-results/',\n      tags: ['css', 'competition']\n    }, {\n      name: 'Center and crop images with a single line of CSS',\n      description: '19 Jan 2015',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Bespoke SVG Reference',\n      description: '23 May 2014',\n      url: '#',\n      tags: ['svg', 'post']\n    }, {\n      name: 'Analog-style LED clock concept',\n      description: '25 Mar 2014',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Simple vertical centering with CSS',\n      description: '10 Jan 2014',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'NYC Subway Lines reimagined with long shadow design',\n      description: '29 Jun 2013',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Time-based media queries',\n      description: '25 Mar 2013',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Hue bump with Sass @for control directive',\n      description: '17 Jan 2013',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Display icons with custom data-attributes',\n      description: '21 Dec 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Circles',\n      description: '19 Dec 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Video and audio in CSS',\n      description: '04 Dec 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Natural curves',\n      description: '08 Nov 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'My initials',\n      description: '23 Oct 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Touchable textures with CSS - can you feel me?',\n      description: '18 Oct 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Further simplified hexcodes',\n      description: '18 Sep 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Box sizing for pseudo elements',\n      description: '09 Sep 2012',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'An Event Apart and a Designerâ€™s View of the Web',\n      description: '23 Sep 2011',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'CSS3 ::selection background color trick',\n      description: '09 Sep 2011',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'Chris Nager 2012 (Responsive Design)',\n      description: '18 Aug 2011',\n      url: '#',\n      tags: ['css', 'post']\n    }, {\n      name: 'ChrisNager.com v2 is live',\n      description: '12 Jun 2011',\n      url: '#',\n      tags: ['css', 'post']\n    }]\n  }\n};\n\nvar Social = function Social() {\n  return _react2.default.createElement('nav', {\n    'data-jsx': 1669409179,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379\n    }\n  }, _react2.default.createElement('a', { href: '', 'data-jsx': 1669409179,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380\n    }\n  }, 'Twitter'), _react2.default.createElement('a', { href: '', 'data-jsx': 1669409179,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381\n    }\n  }, 'Github'), _react2.default.createElement('a', { href: '', 'data-jsx': 1669409179,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382\n    }\n  }, 'LinkedIn'), _react2.default.createElement(_style2.default, {\n    styleId: 1669409179,\n    css: 'a[data-jsx=\"1669409179\"] {margin-right: 1rem;}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL2luZGV4LmpzP2VudHJ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStYZ0IsQUFDUCwwQkFDa0IsbUJBQ3BCIiwiZmlsZSI6InBhZ2VzL2luZGV4LmpzP2VudHJ5Iiwic291cmNlUm9vdCI6Ii9Vc2Vycy9jaHJpc25hZ2VyL0Ryb3Bib3gvQ2hyaXMvUHJvamVjdHMvY2hyaXNuYWdlci5jb20iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgSGVhZCBmcm9tICduZXh0L2hlYWQnXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnXG5cbmNvbnN0IHllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKClcblxuY29uc3QgZGF0YSA9IHtcbiAgaW50cm86IHtcbiAgICBsb2dvOiAnQ04nLFxuICAgIG5hbWU6ICdDaHJpcyBOYWdlcicsXG4gICAgZGVzY3JpcHRpb246ICdNaW5pbWFsaXN0IGRldmVsb3Blci1kZXNpZ25lciBpbiBCcm9va2x5biwgTlknLFxuICAgIHNraWxsczogW1xuICAgICAgJ2phdmFzY3JpcHQnLFxuICAgICAgYGVzJHt5ZWFyICsgMX1gLFxuICAgICAgJ25vZGUnLFxuICAgICAgJ2NzcycsXG4gICAgICAnY3NzLWluLWpzJyxcbiAgICAgICdzaW5nbGUtcHVycG9zZSBjc3MgY2xhc3NlcycsXG4gICAgICAnY3NzLWFuaW1hdGlvbnMnLFxuICAgICAgJ3Bvc3Rjc3MnLFxuICAgICAgJ2h0bWwnLFxuICAgICAgJ3JlYWN0JyxcbiAgICAgICdyZWFjdCBuYXRpdmUnLFxuICAgICAgJ3JlZHV4JyxcbiAgICAgICdyZWFjdC1yb3V0ZXInLFxuICAgICAgJ2pzeCcsXG4gICAgICAnamVzdCcsXG4gICAgICAnZ2l0JyxcbiAgICAgICduZXh0LmpzJyxcbiAgICAgICdub3cnLFxuICAgICAgJ3dlYnBhY2snLFxuICAgICAgJ2d1bHAnLFxuICAgICAgJ3ZpbScsXG4gICAgICAnbW9iaWxlIGFwcHMnLFxuICAgICAgJ3V4JyxcbiAgICAgICd1aScsXG4gICAgICAnYnJhbmRpbmcnLFxuICAgICAgJ2ljb25zJyxcbiAgICAgICdkZXNpZ24gc3lzdGVtcycsXG4gICAgICAndHlwb2dyYXBoeScsXG4gICAgICAnYWNjZXNzaWJpbGl0eScsXG4gICAgXSxcbiAgfSxcbiAgcHJvZmlsZToge1xuICAgIG5hbWU6ICdQcm9maWxlJyxcbiAgICBlbnRyaWVzOiBbXSxcbiAgfSxcbiAgY2FyZWVyOiB7XG4gICAgbmFtZTogJ0NhcmVlcicsXG4gICAgZW50cmllczogW1xuICAgICAge1xuICAgICAgICBuYW1lOiAnSUVYJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICcyMDE1IC0gcHJlc2VudCcsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vaWV4dHJhZGluZy5jb20vJyxcbiAgICAgICAgdGFnczogWydqb2InXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdTYWxlc2ZvcmNlJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICcyMDExIC0gMjAxNScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vd3d3LnNhbGVzZm9yY2UuY29tLycsXG4gICAgICAgIHRhZ3M6IFsnam9iJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnTHVja2llJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICcyMDEwIC0yMDExJyxcbiAgICAgICAgdXJsOiAnaHR0cDovL3d3dy5sdWNraWUuY29tLycsXG4gICAgICAgIHRhZ3M6IFsnam9iJ10sXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG4gIHByb2plY3RzOiB7XG4gICAgbmFtZTogJ1dvcmtzJyxcbiAgICBlbnRyaWVzOiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICc+IFNpZ251bSBtYWpvcml0YXRpcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSBzaWRlLXNjcm9sbGluZyBnYW1lIGJ1aWx0IGluIGEgc2luZ2xlIHN0cmluZycsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9iaXQubHkvc21ham9yJyxcbiAgICAgICAgdGFnczogWydqYXZhc2NyaXB0JywgJ2dhbWUnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdoZXhjb2RlcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQWxsIDQsMDk2IHNob3J0aGFuZCBoZXhjb2RlcycsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vY2hyaXNuYWdlci5naXRodWIuaW8vaGV4Y29kZXMvJyxcbiAgICAgICAgdGFnczogWydjb2xvciddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3Nob3J0LWNvbG9yLW5hbWVzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgNDUgQ1NTIGNvbG9yIG5hbWVzIHRoYXQgYXJlIGFzIHNob3J0IGFzIG9yIHNob3J0ZXIgdGhhbiB0aGVpciBjb3JyZXNwb25kaW5nIGhleGNvZGVzJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9jaHJpc25hZ2VyLmdpdGh1Yi5pby9zaG9ydC1jb2xvci1uYW1lcy8nLFxuICAgICAgICB0YWdzOiBbJ2NvbG9yJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnc2ltcGxlLXBhbGV0dGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Egc2ltcGxlIGNvbG9yIHBhbGV0dGUnLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5naXRodWIuaW8vc2ltcGxlLXBhbGV0dGUvJyxcbiAgICAgICAgdGFnczogWydjb2xvciddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3VuZ3JpZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIHNpbXBsZXN0IHJlc3BvbnNpdmUgY3NzIGdyaWQnLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5naXRodWIuaW8vdW5ncmlkLycsXG4gICAgICAgIHRhZ3M6IFsnbGF5b3V0JywgJ2dyaWQnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdzaW1wbGUtZGVidWcuY3NzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdEZWJ1ZyB5b3VyIGxheW91dHMgd2l0aCBvbmUgbGluZSBvZiBDU1MnLFxuICAgICAgICB1cmw6ICdodHRwczovL2NocmlzbmFnZXIuZ2l0aHViLmlvL3NpbXBsZS1kZWJ1Zy5jc3MvJyxcbiAgICAgICAgdGFnczogWydsYXlvdXQnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdFbW9vbmppJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdBIGNoYXRib3QnLFxuICAgICAgICB1cmw6ICdodHRwczovL2JpdC5kby9lbW9vbmppJyxcbiAgICAgICAgdGFnczogWydjaGF0Ym90JywgJ2phdmFzY3JpcHQnLCAnZmlyZWJhc2UnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdHaXZlIFxcJ25cXCcgR28nLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0EgY3VyYXRlZCBnYWxsZXJ5IG9mIERyaWJiYmxlIHNob3RzIHJld29ya2VkIGFzIGludGVyYWN0aXZlIENvZGVQZW4gcGVucycsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9naXZlLW4tZ28uY28vJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAnZGVzaWduJywgJ2NvbW11bml0eScsICdhcHAnLCAnc2l0ZSddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0NoZWVyIG1lIHVwJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdGdW4sIGN1c3RvbSBwYWdlcyBpbiBzZWNvbmRzJyxcbiAgICAgICAgdXJsOiAnaHR0cDovL2NoZWVybWV1cC5pby8nLFxuICAgICAgICB0YWdzOiBbJ2NzcycsICdqYXZhc2NyaXB0JywgJ2dpZiddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3VuZ3JpZCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAndGhlIHNpbXBsZXN0IHJlc3BvbnNpdmUgY3NzIGdyaWQnLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5naXRodWIuaW8vdW5ncmlkLycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ2dyaWQnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdVbnRpbCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQXJlIHdlIHRoZXJlIHlldD8nLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5naXRodWIuaW8vdW50aWwvJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncmVhY3QnLCAnamF2YXNjcmlwdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ1VOIERpc2FzdGVyIFJlc3BvbnNlJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdDdXJyZW50bHkgd29ya2luZyB3aXRoIHRoZSBIYXJ2YXJkIEh1bWFuaXRhcmlhbiBJbml0aWF0aXZlIG9uIGEgZGlzYXN0ZXIgYW5kIGh1bWFuaXRhcmlhbiByZXNwb25zZSBzdXJ2ZXkgYnVpbGRpbmcgYXBwIHRvIGJlIHVzZWQgYnkgdGhlIFVuaXRlZCBOYXRpb25zJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly92aW1lby5jb20vNzE5MTE0OTcnLFxuICAgICAgICB0YWdzOiBbJ2NzcyddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0phdW50JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdMZXQgeW91ciBmcmllbmRzIGJlIHlvdXIgY2l0eSBndWlkZXMuIChUZWNoQ3J1bmNoIERpc3J1cHQgSGFja2F0aG9uIGFwcCBlbnRyeSknLFxuICAgICAgICB1cmw6ICdodHRwczovL2Rpc3J1cHRueWhhY2thdGhvbi5kZXZwb3N0LmNvbS9zdWJtaXNzaW9ucy8yMzUxNC1qYXVudCcsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ2hhY2thdGhvbiddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0N1cnNvcnMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0FsbCBhdmFpbGFibGUgY3Vyc29ycycsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9jaHJpc25hZ2VyLmdpdGh1Yi5pby9jdXJzb3JzLycsXG4gICAgICAgIHRhZ3M6IFsnaHRtbCcsICdjc3MnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdzaW1wbGUtZGVidWcuY3NzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdEZWJ1ZyB5b3VyIGxheW91dHMgd2l0aCBvbmUgbGluZSBvZiBDU1MnLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5naXRodWIuaW8vc2ltcGxlLWRlYnVnLmNzcy8nLFxuICAgICAgICB0YWdzOiBbJ2NzcycsICdsYXlvdXQnLCAnZGVidWdnZXInXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdzaW1wbGUgcGFsZXR0ZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSBzaW1wbGUgY29sb3IgcGFsZXR0ZScsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9jaHJpc25hZ2VyLmdpdGh1Yi5pby9zaW1wbGUtcGFsZXR0ZS8nLFxuICAgICAgICB0YWdzOiBbJ2NvbG9yJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAn4pyCIHNob3J0IGNvbG9yIG5hbWVzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgNDQgQ1NTIGNvbG9yIG5hbWVzIHRoYXQgYXJlIGFzIHNob3J0IGFzIG9yIHNob3J0ZXIgdGhhbiB0aGVpciBjb3JyZXNwb25kaW5nIGhleGNvZGVzLicsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9jaHJpc25hZ2VyLmdpdGh1Yi5pby9zaG9ydC1jb2xvci1uYW1lcy8nLFxuICAgICAgICB0YWdzOiBbJ2NvbG9yJywgJ2NzcyddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ2hleGNvZGVzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdBbGwgcG9zc2libGUgdGhyZWUgZGlnaXQgaGV4Y29kZXMnLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5naXRodWIuaW8vaGV4Y29kZXMvJyxcbiAgICAgICAgdGFnczogWydjb2xvciddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ3RpbnkgZ29vZ2xlIGZvbnRzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdTdHJpcCBkb3duIHlvdXIgZ29vZ2xlIGZvbnRzIHNpZ25pZmljYW50bHkgdG8gb25seSBpbmNsdWRlIHRoZSBjaGFyYWN0ZXJzIHlvdVxcJ3JlIGFjdHVhbGx5IHVzaW5nJyxcbiAgICAgICAgdXJsOiAnaHR0cDovL2NocmlzbmFnZXIuZ2l0aHViLmlvL3RpbnktZ29vZ2xlLWZvbnRzLycsXG4gICAgICAgIHRhZ3M6IFsnZm9udHMnLCAnamF2YXNjcmlwdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0JpcnRoZGF5IGhleCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRmluZCB5b3VyIGJpcnRoZGF5IGhleGNvZGUnLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5naXRodWIuaW8vYmlydGhkYXktaGV4LycsXG4gICAgICAgIHRhZ3M6IFsnY29sb3InLCAnY3NzJywgJ2phdmFzY3JpcHQnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdTVkcgUGxlYXNlJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdTaW1wbGUgc2NyaXB0IHRvIHJlcGxhY2UgeW91ciBiaXRtYXAgaWNvbnMgd2l0aCBpbmxpbmUgU1ZHcyB3aXRoIGJpdG1hcCBmYWxsYmFjayBidWlsdCBpbicsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9jaHJpc25hZ2VyLmdpdGh1Yi5pby9zdmctcGxlYXNlLycsXG4gICAgICAgIHRhZ3M6IFsnc3ZnJywgJ2phdmFzY3JpcHQnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICcjRmF2NScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnV2hhdCBhcmUgeW91ciBmaXZlIG1vc3QgaW1wb3J0YW50IGl0ZW1zPycsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9mYXY1LmNvLycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnVHdhZGxpYiEnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0FkLWxpYiB5b3VyIHR3ZWV0cycsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9jaHJpc25hZ2VyLmNvbS90d2FkbGliLycsXG4gICAgICAgIHRhZ3M6IFsnamF2YXNjcmlwdCcsICdjc3MnLCAnY29tcGV0aXRpb24nLCAndHdpdHRlcicsICcxMGsnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdCbGlzcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQmVhdXRpZnVsbHkgbGVhbiwgaWRlYWwgc3R5bGUgc2hlZXRzJyxcbiAgICAgICAgdXJsOiAnaHR0cDovL2NocmlzbmFnZXIuZ2l0aHViLmlvL2JsaXNzLycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnQ3JhZnRlZCBDU1MnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0EgcGVyc29uYWwgY29tcGlsYXRpb24gb2YgQ1NTIHByYWN0aWNlcyBJIGZvbGxvdycsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jaHJpc25hZ2VyL2NyYWZ0ZWQtY3NzJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAnY29kZSBndWlkZWxpbmVzJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnU29jaWFsIExvZ29zJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdEb3dubG9hZCBvZmZpY2lhbCBzb2NpYWwgbG9nb3MnLFxuICAgICAgICB1cmw6ICdodHRwOi8vY2hyaXNuYWdlci5jb20vc29jaWFsLWxvZ29zLycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJ10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnY2hyaXNuYWdlci5jb20gdjEnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ09yaWdpbnMnLFxuICAgICAgICB1cmw6ICdodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMTA4MDgxMzU2MDYvaHR0cDovL2NocmlzbmFnZXIuY29tL3BvcnRmb2xpby8jY2hyaXNuYWdlci12MScsXG4gICAgICAgIHRhZ3M6IFsnc2l0ZScsICdodG1sJywgJ2NzcycsICdqYXZhc2NyaXB0J10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnY2hyaXNuYWdlci5jb20gdjInLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0NhcmUgdG8gcmVtaW5pc2NlPycsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDExMDgwOTA4NTk1MS9odHRwOi8vY2hyaXNuYWdlci5jb20vJyxcbiAgICAgICAgdGFnczogWydzaXRlJywgJ2h0bWwnLCAnY3NzJywgJ2phdmFzY3JpcHQnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdjaHJpc25hZ2VyLmNvbSB2MycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSXRlcmF0ZScsXG4gICAgICAgIHVybDogJ2h0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE2MTAwMTE4MjAxMy9odHRwOi8vY2hyaXNuYWdlci5jb20vJyxcbiAgICAgICAgdGFnczogWydzaXRlJywgJ2h0bWwnLCAnY3NzJywgJ2phdmFzY3JpcHQnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdCZW4gVGhvbXNvbiBQaG90bycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQXd3d2FyZHMgU2l0ZSBvZiB0aGUgRGF5JyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly93d3cuYXd3d2FyZHMuY29tL3NpdGVzL2Jlbi10aG9tc29uLXBob3RvZ3JhcGh5JyxcbiAgICAgICAgdGFnczogWydzaXRlJywgJ2h0bWwnLCAnY3NzJywgJ2JyYW5kaW5nJywgJ2xvZ28nLCAndXgnLCAncmVzZWFyY2gnLCAndWknXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdUb3RhbGx5IEZyZXNoJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdFeHBlcmltZW50YWwgQ1NTMyBkZXNpZ24gZmVhdHVyZWQgb24gU21hc2hpbmcgTWFnYXppbmUnLFxuICAgICAgICB1cmw6ICdodHRwczovL3d3dy5zbWFzaGluZ21hZ2F6aW5lLmNvbS8yMDEwLzA3L2NzczMtZGVzaWduLWNvbnRlc3QtcmVzdWx0cy8nLFxuICAgICAgICB0YWdzOiBbJ2NzcycsICdjb21wZXRpdGlvbiddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0NlbnRlciBhbmQgY3JvcCBpbWFnZXMgd2l0aCBhIHNpbmdsZSBsaW5lIG9mIENTUycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMTkgSmFuIDIwMTUnLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0Jlc3Bva2UgU1ZHIFJlZmVyZW5jZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMjMgTWF5IDIwMTQnLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydzdmcnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0FuYWxvZy1zdHlsZSBMRUQgY2xvY2sgY29uY2VwdCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMjUgTWFyIDIwMTQnLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ1NpbXBsZSB2ZXJ0aWNhbCBjZW50ZXJpbmcgd2l0aCBDU1MnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzEwIEphbiAyMDE0JyxcbiAgICAgICAgdXJsOiAnIycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ3Bvc3QnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdOWUMgU3Vid2F5IExpbmVzIHJlaW1hZ2luZWQgd2l0aCBsb25nIHNoYWRvdyBkZXNpZ24nLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzI5IEp1biAyMDEzJyxcbiAgICAgICAgdXJsOiAnIycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ3Bvc3QnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdUaW1lLWJhc2VkIG1lZGlhIHF1ZXJpZXMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzI1IE1hciAyMDEzJyxcbiAgICAgICAgdXJsOiAnIycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ3Bvc3QnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdIdWUgYnVtcCB3aXRoIFNhc3MgQGZvciBjb250cm9sIGRpcmVjdGl2ZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMTcgSmFuIDIwMTMnLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0Rpc3BsYXkgaWNvbnMgd2l0aCBjdXN0b20gZGF0YS1hdHRyaWJ1dGVzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICcyMSBEZWMgMjAxMicsXG4gICAgICAgIHVybDogJyMnLFxuICAgICAgICB0YWdzOiBbJ2NzcycsICdwb3N0J10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnQ2lyY2xlcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMTkgRGVjIDIwMTInLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ1ZpZGVvIGFuZCBhdWRpbyBpbiBDU1MnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzA0IERlYyAyMDEyJyxcbiAgICAgICAgdXJsOiAnIycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ3Bvc3QnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdOYXR1cmFsIGN1cnZlcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMDggTm92IDIwMTInLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ015IGluaXRpYWxzJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICcyMyBPY3QgMjAxMicsXG4gICAgICAgIHVybDogJyMnLFxuICAgICAgICB0YWdzOiBbJ2NzcycsICdwb3N0J10sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiAnVG91Y2hhYmxlIHRleHR1cmVzIHdpdGggQ1NTIC0gY2FuIHlvdSBmZWVsIG1lPycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMTggT2N0IDIwMTInLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0Z1cnRoZXIgc2ltcGxpZmllZCBoZXhjb2RlcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMTggU2VwIDIwMTInLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0JveCBzaXppbmcgZm9yIHBzZXVkbyBlbGVtZW50cycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnMDkgU2VwIDIwMTInLFxuICAgICAgICB1cmw6ICcjJyxcbiAgICAgICAgdGFnczogWydjc3MnLCAncG9zdCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ0FuIEV2ZW50IEFwYXJ0IGFuZCBhIERlc2lnbmVy4oCZcyBWaWV3IG9mIHRoZSBXZWInLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzIzIFNlcCAyMDExJyxcbiAgICAgICAgdXJsOiAnIycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ3Bvc3QnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdDU1MzIDo6c2VsZWN0aW9uIGJhY2tncm91bmQgY29sb3IgdHJpY2snLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzA5IFNlcCAyMDExJyxcbiAgICAgICAgdXJsOiAnIycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ3Bvc3QnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdDaHJpcyBOYWdlciAyMDEyIChSZXNwb25zaXZlIERlc2lnbiknLFxuICAgICAgICBkZXNjcmlwdGlvbjogJzE4IEF1ZyAyMDExJyxcbiAgICAgICAgdXJsOiAnIycsXG4gICAgICAgIHRhZ3M6IFsnY3NzJywgJ3Bvc3QnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdDaHJpc05hZ2VyLmNvbSB2MiBpcyBsaXZlJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICcxMiBKdW4gMjAxMScsXG4gICAgICAgIHVybDogJyMnLFxuICAgICAgICB0YWdzOiBbJ2NzcycsICdwb3N0J10sXG4gICAgICB9LFxuICAgIF0sXG4gIH0sXG59XG5cbmNvbnN0IFNvY2lhbCA9ICgpID0+IChcbiAgPG5hdj5cbiAgICA8YSBocmVmPVwiXCI+VHdpdHRlcjwvYT5cbiAgICA8YSBocmVmPVwiXCI+R2l0aHViPC9hPlxuICAgIDxhIGhyZWY9XCJcIj5MaW5rZWRJbjwvYT5cblxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgIGEge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XG4gICAgICB9XG4gICAgYH08L3N0eWxlPlxuICA8L25hdj5cbilcblxuY29uc3QgVGFnID0gKHtsYWJlbH0pID0+IDxpPntsYWJlbH08L2k+XG5cbmNvbnN0IEludHJvID0gKHtkYXRhfSkgPT4gKFxuICA8aGVhZGVyPlxuICAgIDxkaXY+XG4gICAgICA8Yj57ZGF0YS5sb2dvfTwvYj5cbiAgICAgIDxoMT57ZGF0YS5uYW1lfTwvaDE+XG4gICAgICA8cD57ZGF0YS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+U3R1ZmYgSSBlbmpveTwvaDI+XG4gICAgICAgIHtkYXRhLnNraWxscy5tYXAoKHNraWxsLCBpbmRleCkgPT4gPFRhZyBrZXk9e2luZGV4fSBsYWJlbD17c2tpbGx9IC8+KX1cbiAgICAgIDwvZGl2PlxuICAgICAgPFNvY2lhbCAvPlxuICAgIDwvZGl2PlxuXG4gICAgPHN0eWxlIGpzeD57YFxuICAgICAgaDEge1xuICAgICAgICBmb250LXNpemU6IDNyZW07XG4gICAgICB9XG5cbiAgICAgIGIge1xuICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgICAgICBmb250LXNpemU6IDZyZW07XG4gICAgICAgIGZvbnQtZmFtaWx5OiBGdXR1cmE7XG4gICAgICB9XG5cbiAgICAgIGRpdiA+IGRpdiB7XG4gICAgICAgIG1hcmdpbi10b3A6IDNyZW07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDNyZW07XG4gICAgICB9XG4gICAgYH08L3N0eWxlPlxuICA8L2hlYWRlcj5cbilcblxuY29uc3QgU2VjdGlvbiA9ICh7ZGF0YX0pID0+IChcbiAgPHNlY3Rpb24gaWQ9XCJlbnRyaWVzXCI+XG4gICAgPGgxPjxhIGhyZWY9e2AjJHtkYXRhLm5hbWUudG9Mb3dlckNhc2UoKX1gfT57ZGF0YS5uYW1lfTwvYT48L2gxPlxuXG4gICAgPGhyIC8+XG5cbiAgICA8dWw+XG4gICAgICB7ZGF0YS5lbnRyaWVzLm1hcCgoe3VybCwgbmFtZSwgZGVzY3JpcHRpb24sIHRhZ3N9LCBpbmRleCkgPT4gKFxuICAgICAgICA8bGkga2V5PXtpbmRleH0+XG4gICAgICAgICAgPGEgaHJlZj17dXJsfSBzdHlsZT17e2ZvbnRGYW1pbHk6IHRhZ3MuaW5kZXhPZigncG9zdCcpICE9PSAtMSA/ICdHZW9yZ2lhLCBzZXJpZicgOiB0YWdzLmluZGV4T2YoJ2pvYicpICE9PSAtMSA/ICdpbmhlcml0JyA6ICdtb25vc3BhY2UnfX0+XG4gICAgICAgICAgICA8aDI+e25hbWV9PC9oMj5cbiAgICAgICAgICAgIDxwPntkZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAge3RhZ3MgJiYgdGFncy5tYXAoKHRhZywgaW5kZXgpID0+IDxUYWcga2V5PXtpbmRleH0gbGFiZWw9e3RhZ30gLz4pfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgICkpfVxuICAgIDwvdWw+XG5cbiAgICA8c3R5bGUganN4PntgXG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogNjBlbSkge1xuICAgICAgICB1bCB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAtMXJlbTtcbiAgICAgICAgICBtYXJnaW4tbGVmdDogLTFyZW07XG4gICAgICAgIH1cblxuICAgICAgICBsaSB7XG4gICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBAbWVkaWEgKG1pbi13aWR0aDogODBlbSkge1xuICAgICAgICBsaSB7XG4gICAgICAgICAgd2lkdGg6IDI1JTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBoMSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcbiAgICAgIH1cblxuICAgICAgaDEgPiBhOmhvdmVyOjphZnRlcixcbiAgICAgIGgxID4gYTpmb2N1czo6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiBcIiAjXCI7XG4gICAgICB9XG5cbiAgICAgIGgyIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgfVxuXG4gICAgICBwIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgIH1cblxuICAgICAgdWwge1xuICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgIH1cblxuICAgICAgbGkge1xuICAgICAgICAvKiBtYXJnaW4tYm90dG9tOiA0cmVtOyAqL1xuICAgICAgfVxuXG4gICAgICBsaSA+IGEge1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICBtaW4taGVpZ2h0OiAzMDBweDtcbiAgICAgICAgbWluLWhlaWdodDogMTV2dztcbiAgICAgICAgcGFkZGluZzogMXJlbTtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB9XG4gICAgYH08L3N0eWxlPlxuICA8L3NlY3Rpb24+XG4pXG5cbmNvbnN0IE91dHJvID0gKCkgPT4gKFxuICA8Zm9vdGVyPlxuICAgIDxkaXY+XG4gICAgICA8U29jaWFsIC8+XG4gICAgICA8cD5cbiAgICAgICAgPHNtYWxsPiZjb3B5OyB7eWVhcn0gQ2hyaXMgTmFnZXIgJm1pZGRvdDsgQnVpbHQgaW4gdmltIHdpdGggbmV4dC5qcy48L3NtYWxsPlxuICAgICAgPC9wPlxuICAgIDwvZGl2PlxuICA8L2Zvb3Rlcj5cbilcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4gKFxuICA8ZGl2PlxuICAgIDxIZWFkPlxuICAgICAgPHRpdGxlPkNocmlzIE5hZ2VyPC90aXRsZT5cbiAgICAgIDxtZXRhIGNoYXJTZXQ9XCJ1dGYtOFwiIC8+XG4gICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwiaW5pdGlhbC1zY2FsZT0xLjAsIHdpZHRoPWRldmljZS13aWR0aFwiIC8+XG4gICAgPC9IZWFkPlxuICAgIDxJbnRybyBkYXRhPXtkYXRhLmludHJvfSAvPlxuICAgIDxtYWluPlxuICAgICAgPFNlY3Rpb24gZGF0YT17ZGF0YS5wcm9qZWN0c30gLz5cbiAgICAgIDxTZWN0aW9uIGRhdGE9e2RhdGEuY2FyZWVyfSAvPlxuICAgIDwvbWFpbj5cbiAgICA8T3V0cm8gLz5cbiAgICA8c3R5bGU+e2BcbiAgICAgIGJvZHkge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIGZvbnQ6IDEwMCUvMS41IEJsaW5rTWFjU3lzdGVtRm9udDtcbiAgICAgIH1cblxuICAgICAgaGVhZGVyLFxuICAgICAgc2VjdGlvbixcbiAgICAgIGZvb3RlciB7XG4gICAgICAgIHBhZGRpbmc6IDJyZW07XG4gICAgICB9XG5cbiAgICAgIGhlYWRlciA+IGRpdixcbiAgICAgIHNlY3Rpb24gPiBkaXYsXG4gICAgICBmb290ZXIgPiBkaXYge1xuICAgICAgICBtYXgtd2lkdGg6IDYwZW07XG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgICB9XG5cbiAgICAgIGEge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIGNvbG9yOiBpbmhlcml0O1xuICAgICAgfVxuXG4gICAgICBhOmhvdmVyLFxuICAgICAgYTpmb2N1cyB7XG4gICAgICAgICFjb2xvcjogI2YwNjtcbiAgICAgICAgIWJhY2tncm91bmQtY29sb3I6ICMwY2Y7XG4gICAgICB9XG5cbiAgICAgIGhyIHtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBoZWlnaHQ6IDdweDtcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KC0xMzVkZWcsIHRyYW5zcGFyZW50IDRweCwgIzAwMCA1cHgsIHRyYW5zcGFyZW50IDApLCBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCB0cmFuc3BhcmVudCA0cHgsICMwMDAgNXB4LCB0cmFuc3BhcmVudCAwKTtcbiAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdC14O1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDEzcHggMTBweDtcbiAgICAgIH1cblxuICAgICAgaSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogLjVyZW07XG4gICAgICAgIGZvbnQtc2l6ZTogLjc1cmVtO1xuICAgICAgICBjb2xvcjogIzg4ODtcbiAgICAgIH1cblxuICAgICAgYTpob3ZlcixcbiAgICAgIGE6Zm9jdXMge1xuICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzBjZjtcbiAgICAgIH1cbiAgICBgfTwvc3R5bGU+XG4gIDwvZGl2PlxuKVxuIl19 */\\n/*@ sourceURL=pages/index.js?entry */'\n  }));\n};\n\nvar Tag = function Tag(_ref) {\n  var label = _ref.label;\n  return _react2.default.createElement('i', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    }\n  }, label);\n};\n\nvar Intro = function Intro(_ref2) {\n  var data = _ref2.data;\n  return _react2.default.createElement('header', {\n    'data-jsx': 1282536041,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395\n    }\n  }, _react2.default.createElement('div', {\n    'data-jsx': 1282536041,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396\n    }\n  }, _react2.default.createElement('b', {\n    'data-jsx': 1282536041,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    }\n  }, data.logo), _react2.default.createElement('h1', {\n    'data-jsx': 1282536041,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398\n    }\n  }, data.name), _react2.default.createElement('p', {\n    'data-jsx': 1282536041,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    }\n  }, data.description), _react2.default.createElement('div', {\n    'data-jsx': 1282536041,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400\n    }\n  }, _react2.default.createElement('h2', {\n    'data-jsx': 1282536041,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    }\n  }, 'Stuff I enjoy'), data.skills.map(function (skill, index) {\n    return _react2.default.createElement(Tag, { key: index, label: skill, __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      }\n    });\n  })), _react2.default.createElement(Social, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404\n    }\n  })), _react2.default.createElement(_style2.default, {\n    styleId: 1282536041,\n    css: 'h1[data-jsx=\"1282536041\"] {font-size: 3rem;}b[data-jsx=\"1282536041\"] {font-weight: normal;font-size: 6rem;font-family: Futura;}div[data-jsx=\"1282536041\"] > div[data-jsx=\"1282536041\"] {margin-top: 3rem;margin-bottom: 3rem;}\\n/*# sourceMappingURL=data:application/json;base64, */\\n/*@ sourceURL=pages/index.js?entry */'\n  }));\n};\n\nvar Section = function Section(_ref3) {\n  var data = _ref3.data;\n  return _react2.default.createElement('section', { id: 'entries', 'data-jsx': 935095139,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427\n    }\n  }, _react2.default.createElement('h1', {\n    'data-jsx': 935095139,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428\n    }\n  }, _react2.default.createElement('a', { href: '#' + data.name.toLowerCase(), 'data-jsx': 935095139,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428\n    }\n  }, data.name)), _react2.default.createElement('hr', {\n    'data-jsx': 935095139,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430\n    }\n  }), _react2.default.createElement('ul', {\n    'data-jsx': 935095139,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432\n    }\n  }, data.entries.map(function (_ref4, index) {\n    var url = _ref4.url,\n        name = _ref4.name,\n        description = _ref4.description,\n        tags = _ref4.tags;\n    return _react2.default.createElement('li', { key: index, 'data-jsx': 935095139,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434\n      }\n    }, _react2.default.createElement('a', { href: url, style: { fontFamily: tags.indexOf('post') !== -1 ? 'Georgia, serif' : tags.indexOf('job') !== -1 ? 'inherit' : 'monospace' }, 'data-jsx': 935095139,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      }\n    }, _react2.default.createElement('h2', {\n      'data-jsx': 935095139,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      }\n    }, name), _react2.default.createElement('p', {\n      'data-jsx': 935095139,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      }\n    }, description), tags && tags.map(function (tag, index) {\n      return _react2.default.createElement(Tag, { key: index, label: tag, __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        }\n      });\n    })));\n  })), _react2.default.createElement(_style2.default, {\n    styleId: 935095139,\n    css: '@media (min-width: 60em) {ul[data-jsx=\"935095139\"] {margin-right: -1rem;margin-left: -1rem;}li[data-jsx=\"935095139\"] {width: 50%;display: inline-block;vertical-align: top;}}@media (min-width: 80em) {li[data-jsx=\"935095139\"] {width: 25%;}}h1[data-jsx=\"935095139\"] {font-size: 2rem;}h1[data-jsx=\"935095139\"] > a[data-jsx=\"935095139\"]:hover::after,h1[data-jsx=\"935095139\"] > a[data-jsx=\"935095139\"]:focus::after {content: \" #\";}h2[data-jsx=\"935095139\"] {margin-bottom: 0;font-size: 1rem;}p[data-jsx=\"935095139\"] {margin-top: 0;}ul[data-jsx=\"935095139\"] {list-style-type: none;padding-left: 0;}li[data-jsx=\"935095139\"] {}li[data-jsx=\"935095139\"] > a[data-jsx=\"935095139\"] {box-sizing: border-box;min-height: 300px;min-height: 15vw;padding: 1rem;display: block;}\\n/*# sourceMappingURL=data:application/json;base64, */\\n/*@ sourceURL=pages/index.js?entry */'\n  }));\n};\n\nvar Outro = function Outro() {\n  return _react2.default.createElement('footer', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503\n    }\n  }, _react2.default.createElement('div', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504\n    }\n  }, _react2.default.createElement(Social, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    }\n  }), _react2.default.createElement('p', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506\n    }\n  }, _react2.default.createElement('small', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 507\n    }\n  }, '\\xA9 ', year, ' Chris Nager \\xB7 Built in vim with next.js.'))));\n};\n\nexports.default = function () {\n  return _react2.default.createElement('div', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514\n    }\n  }, _react2.default.createElement(_head2.default, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515\n    }\n  }, _react2.default.createElement('title', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516\n    }\n  }, 'Chris Nager'), _react2.default.createElement('meta', { charSet: 'utf-8', __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517\n    }\n  }), _react2.default.createElement('meta', { name: 'viewport', content: 'initial-scale=1.0, width=device-width', __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518\n    }\n  })), _react2.default.createElement(Intro, { data: data.intro, __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520\n    }\n  }), _react2.default.createElement('main', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521\n    }\n  }, _react2.default.createElement(Section, { data: data.projects, __source: {\n      fileName: _jsxFileName,\n      lineNumber: 522\n    }\n  }), _react2.default.createElement(Section, { data: data.career, __source: {\n      fileName: _jsxFileName,\n      lineNumber: 523\n    }\n  })), _react2.default.createElement(Outro, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525\n    }\n  }), _react2.default.createElement('style', {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526\n    }\n  }, '\\n      body {\\n        margin: 0;\\n        font: 100%/1.5 BlinkMacSystemFont;\\n      }\\n\\n      header,\\n      section,\\n      footer {\\n        padding: 2rem;\\n      }\\n\\n      header > div,\\n      section > div,\\n      footer > div {\\n        max-width: 60em;\\n        margin-right: auto;\\n        margin-left: auto;\\n      }\\n\\n      a {\\n        text-decoration: none;\\n        color: inherit;\\n      }\\n\\n      a:hover,\\n      a:focus {\\n        !color: #f06;\\n        !background-color: #0cf;\\n      }\\n\\n      hr {\\n        border: none;\\n        height: 7px;\\n        background: linear-gradient(-135deg, transparent 4px, #000 5px, transparent 0), linear-gradient(135deg, transparent 4px, #000 5px, transparent 0);\\n        background-repeat: repeat-x;\\n        background-size: 13px 10px;\\n      }\\n\\n      i {\\n        margin-right: .5rem;\\n        font-size: .75rem;\\n        color: #888;\\n      }\\n\\n      a:hover,\\n      a:focus {\\n        text-decoration: underline;\\n        color: red;\\n        background-color: #0cf;\\n      }\\n    '));\n};\n\n ;(function register() { /* react-hot-loader/webpack */ if (true) { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', \"/Users/chrisnager/Dropbox/Chris/Projects/chrisnager.com/pages/index.js\"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, \"/Users/chrisnager/Dropbox/Chris/Projects/chrisnager.com/pages/index.js\"); } } })();\n    (function (Component, route) {\n      if (false) return\n      if (false) return\n\n      var qs = __webpack_require__(82)\n      var params = qs.parse(__resourceQuery.slice(1))\n      if (params.entry == null) return\n\n      module.hot.accept()\n      Component.__route = route\n\n      if (module.hot.status() === 'idle') return\n\n      var components = next.router.components\n      for (var r in components) {\n        if (!components.hasOwnProperty(r)) continue\n\n        if (components[r].Component.__route === route) {\n          next.router.update(r, Component)\n        }\n      }\n    })(module.exports.default || module.exports, \"/\")\n  \n/* WEBPACK VAR INJECTION */}.call(exports, \"?entry\"))\n\n/***/ }),\n\n/***/ 560:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(555);\n\n\n/***/ })\n\n},[560]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}